userid<-"963276123"
filename<-paste("origin_db",userid,sep = "_")
sqlite    <- dbDriver("SQLite")
sourcedb <- dbConnect(sqlite,"origin_db")
MiData <- dbGetQuery(sourcedb,"select * from date_data")
setwd("..")
View(MiData)
setwd("./databases")
userid<-"963276123"
filename<-paste("origin_db",userid,sep = "_")
list.files()
filename
sqlite    <- dbDriver("SQLite")
sourcedb <- dbConnect(sqlite,filename)
MiData <- dbGetQuery(sourcedb,"select * from date_data")
setwd("..")
View(MiData)
MiData$date<-as.Date(MiData$date,"%Y-%m-%d")
jsondata<-sapply(MiData$summary,fromJSON)
slp<-jsondata[1,]
stp<-jsondata[4,]
sleepdur<-unname( unlist( lapply(slp,"[","lt") )  )   ##extract elements from list of list
deepsleep<-unname( unlist( lapply(slp,"[","dp") )  )
totalstep<-unname( unlist( lapply(stp,"[","ttl") ) )
MiData$date<-as.Date(MiData$date,"%Y-%m-%d")
jsondata<-sapply(MiData$summary,fromJSON)
slp<-jsondata[1,]
stp<-jsondata[4,]
sleepdur<-unname( unlist( lapply(slp,"[[","lt") )  )   ##extract elements from list of list
deepsleep<-unname( unlist( lapply(slp,"[[","dp") )  )
totalstep<-unname( unlist( lapply(stp,"[[","ttl") ) )
names(MiData)
MiData$date<-as.Date(MiData$DATE,"%Y-%m-%d")
sourceData <- dbGetQuery(sourcedb,"select * from date_data")
sourceData$DATE<-as.Date(MiData$DATE,"%Y-%m-%d")
jsondata<-sapply(sourceData$SUMMARY,fromJSON)
slp<-jsondata[1,]
stp<-jsondata[4,]
sleepdur<-unname( unlist( lapply(slp,"[[","lt") )  )   ##extract elements from list of list
deepsleep<-unname( unlist( lapply(slp,"[[","dp") )  )
totalstep<-unname( unlist( lapply(stp,"[[","ttl") ) )
summary(totalstep)
summary(totalstep==0)
cleanData <- as.data.frame(date=sourceData$DATE,sleep.duration=sleepdur,sleep.deep=deepsleep,step=totalstep)
?as.data.frame
cleanData <- data.frame(date=sourceData$DATE,sleep.duration=sleepdur,sleep.deep=deepsleep,step=totalstep)
View(cleanData)
?order
head(dplyr::arrange(cleanData,date))
cleanData<-dplyr::arrange(cleanData,date)
cleanData[data="2016-1-1"]
cleanData[date="2016-1-1",]
cleanData[date=="2016-1-1",]
258/60
284/60
View(sourceData)
str(jsondata)
summary(jsondata)
jsondata[[1]]
jsondata[[-1]]
jsondata[[lt]]
jsondata[[2]][[lt]]
jsondata[2][[lt]]
jsondata[2][["lt"]]
jsondata[[2][["lt"]]
jsondata[[2]][["lt"]]
View(jsondata)
cleanData$sleep.duration/60
137/60
(137/60-2)*60
floor(cleanData$sleep.duration/60)
hr<-floor(cleanData$sleep.duration/60)
(cleanData$sleep.duration/60-hr)*60
min<-(cleanData$sleep.duration/60-hr)*60
tmp<-data.frame(hr,min)
View(tmp)
View(sourceData)
sourceData[135,4]
View(jsondata)
jsondata[1,-1]
?dplyr::select()
?dplyr::select
dplyr::select(jsondata,1:5)
View(jsondata)
jsondata[1,1:ncol(jsondata)]
jsondata[1,-(1:ncol(jsondata)-1)]
jsondata[1,-(1:ncol(jsondata)-5)]
jsondata[1,-(1:ncol(jsondata)-2)]
jsondata[1,-(1:ncol(jsondata)-1)]
jsondata[1,-(1:(ncol(jsondata)-1))]
jsondata[1,-(1:(ncol(jsondata)-5))]
ncol(jsondata)
jsondata[1,-(1:130)]
sleepdur
cleanData <- data.frame(date=sourceData$DATE,sleep.duration=sleepdur,sleep.deep=deepsleep,step=totalstep)
cleanData <- data.frame(date=arrange(sourceData$DATE),sleep.duration=sleepdur,sleep.deep=deepsleep,step=totalstep)
cleanData <- data.frame(date=dplyr::arrange(sourceData$DATE),sleep.duration=sleepdur,sleep.deep=deepsleep,step=totalstep)
sourceData$DATE
order(sourceData$DATE)
arrange(sourceData$DATE)
dplyr::arrange(sourceData$DATE)
dplyr::arrange(as.data.frame(sourceData$DATE))
View(sourceData)
cleanData <- data.frame(date=arrange(sourceData$DATE),sleep.surface=sleepdur,sleep.deep=deepsleep,step=totalstep)
cleanData <- data.frame(date=sourceData$DATE,sleep.surface=sleepdur,sleep.deep=deepsleep,step=totalstep)
lightsleep<-unname( unlist( lapply(slp,"[[","lt") )  )   ##extract elements from list of list
deepsleep<-unname( unlist( lapply(slp,"[[","dp") )  )
totalstep<-unname( unlist( lapply(stp,"[[","ttl") ) )
cleanData <- data.frame(date=sourceData$DATE,sleep.light=lightsleep,sleep.deep=deepsleep,step=totalstep)
cleanData<-dplyr::arrange(cleanData,date)
cleanData$sleep.light/60
cleanData$sleep.deep/60
qplot(cleanData$date,cleanData$sleep.deep)
gplot(data=cleanData,aes(x=cleanData$date,y=cleanData$sleep.light,cleanData$sleep.deep))+geom_point()
ggplot(data=cleanData,aes(x=cleanData$date,y=cleanData$sleep.light,cleanData$sleep.deep))+geom_point()
ggplot(data=cleanData,aes(x=cleanData$date,y=cleanData$sleep.light,z=cleanData$sleep.deep))+geom_point()
?"ggplot"
reshape(cleanData)
melt(cleanData)
library(reshape2)
melt(cleanData)
?melt
library("lattice")
?"lattice"
ggplot(data=cleanData,aes(x=date,y=value,col=variable))+geom_point(y=sleep.light,col="y1")+geom_point(y=sleep.deep,col="y2")
ggplot(data=cleanData,aes(x=date,y=value,col=variable))+geom_point(aes(y=sleep.light,col="y1"))+geom_point(aes(y=sleep.deep,col="y2"))
range(cleanData$date)
datedur<-range(cleanData$date)
boxplot(cleanData$sleep.light,cleanData$sleep.deep)
boxplot(cleanData$sleep.light/60,cleanData$sleep.deep/60)
ggplot(data=cleanData,aes(x=date,y=value,col=variable))+geom_point(aes(y=sleep.light,col="y1"))+geom_point(aes(y=sleep.deep,col="y2"))+geom_point(aes(y=step,col="y3"))
ggplot(data=cleanData,aes(x=date,y=value,col=type))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_point(aes(y=sleep.deep,col="deep sleep"))
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth(method="lm")
?geom_smooth
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth()
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth(method="auto",stat = "ide")
?geom_smooth
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth(method="auto",stat = "ide")+title(main="dta")
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth(method="auto")+title(main="dta")
ggplot(data=cleanData,aes(x=date,y=step))+geom_point()+geom_smooth(method="auto")+labs(x="TADA")
?labs
cleanData[1]
cleanData[1,1]
str(cleanData[1,1])
weekdays(cleanData$date)
cleanData$weekday<-weekdays(cleanData$date)
gourp_by(cleanData)
groupeddata<-group_by(cleanData,weekday)
library(dplyr)
groupeddata<-group_by(cleanData,weekday)
groupeddata
mean(groupeddata$sleep.light)
function(row){
View(groupeddata)
summarize(groupeddata,weekday=weekday,sleep.light=mean(sleep.light[sleep.light!=0]),sleep.deep=mean(sleep.deep[sleep.deep!=0]),step=mean(step[step!=0]))
summarize(groupeddata,weekday=weekday)
summarize(groupeddata,sleep.light=mean(sleep.light[sleep.light!=0]),sleep.deep=mean(sleep.deep[sleep.deep!=0]),step=mean(step[step!=0]))
avgs<-summarize(groupeddata,sleep.light=mean(sleep.light[sleep.light!=0]),sleep.deep=mean(sleep.deep[sleep.deep!=0]),step=mean(step[step!=0]))
avgs["weekday"=="Friday"]
avgs[avgs[1,1]=="Friday"]
avgs[avgs[,1]=="Friday"]
avgs[avgs[,1]=="Friday",]
avgs[avgs[,1]=="Friday",]["sleep.light"]
replace <- function(rowunit,col){
if(rowunit[,col]==0){
rowunit[,col]<-avgs[avgs[1,1]==rowunit$weekday,col]
}
rowunit
}
replace(cleanData[1,])
debug(repalce)
debug(replace)
replace(cleanData[1,])
rowunit
rowunit[1]
rowunit[1,1]
rowunit[1,2]
rowunit[1,3]
rowunit[1,4]
rowunit[1,4]==0
rowunit[,4]==0
replace <- function(rowunit){
for( col in 1:ncol(rowunit) ){
if(rowunit[,col]==0){
rowunit[,col]<-avgs[avgs[1,1]==rowunit$weekday,col]
}
}
rowunit
}
debug(replace)
replace(cleanData[1,])
rowunit
rowunit$weekday
avg
replace <- function(rowunit,avgs){
for( col in 1:ncol(rowunit) ){
if(rowunit[,col]==0){
rowunit[,col]<-avgs[avgs[1,1]==rowunit$weekday,col]
}
}
rowunit
}
?"Vectorize"
undebug(replace)
undebug(replace)
undebug(replace)
replace(cleanData[1,],avgs)
debug(replace)
replace(cleanData[1,],avgs)
avgs
col
rowunit
col
rowunit[,2]
avgs[1,1]
replace <- function(rowunit,avgs){
for( col in 1:ncol(rowunit) ){
if(rowunit[,col]==0){
rowunit[,col]<-avgs[avgs[,1]==rowunit$weekday,col]
}
}
rowunit
}
replace(cleanData[1,],avgs)
avgs
vecreplace<-Vectorize(replace,vectorize.args = "rowunit")
vecreplace(cleanData,avgs)
str(vecreplace)
debug(vecreplace)
vecreplace(cleanData,avgs)
rowunit
names
vectorize.args
vecreplace(cleanData,avgs)
ncol(rowunit)
dim(rowunit)
apply(cleanData,function(rowunit) replace(rowunit,avgs))
?apply
apply(cleanData,1,function(rowunit) replace(rowunit,avgs))
apply(cleanData,function(rowunit) replace(rowunit,avgs))
apply(cleanData,2,function(rowunit) replace(rowunit,avgs))
apply(cleanData,2,function(rowunit) replace(rowunit,avgs))
apply(cleanData,1,function(rowunit) replace(rowunit,avgs))
apply(cleanData,2,function(rowunit) replace(rowunit,avgs))
debug(replace)
apply(cleanData,1,function(rowunit) replace(rowunit,avgs))
rowunit
1:ncol(rowunit)
ncol(rowunit)
dim(rowunit)
rowunit
str(rowunit)
rowunit[2]
rowunit[3]
rowunit[4]
replace <- function(rowunit,avgs){
for( col in 1:4 ){
if(rowunit[,col]==0){
rowunit[,col]<-avgs[avgs[,1]==rowunit$weekday,col]
}
}
rowunit
}
apply(cleanData,1,function(rowunit) replace(rowunit,avgs))
debug(replace)
apply(cleanData,1,function(rowunit) replace(rowunit,avgs))
rowunit[,1]
rowunit[,2]
sapply(cleanData,function(rowunit) replace(rowunit,avgs))
by(cleanData,1:ncol(cleanData),function(rowunit) replace(rowunit,avgs))
by(cleanData,1:nrow(cleanData),function(rowunit) replace(rowunit,avgs))
undebug(replace)
by(cleanData,1:nrow(cleanData),function(rowunit) replace(rowunit,avgs))
completedata<-by(cleanData,1:nrow(cleanData),function(rowunit) replace(rowunit,avgs))
?by
completedata<-by(cleanData,1:nrow(cleanData),function(rowunit) replace(rowunit,avgs),simplify = T)
str(completedata)
completedata[[1]]
lapply(completedata,function(row){row})
unlist(completedata)
str(unlist(completedata))
?ldply
ldply(completedata)
library(plyr)
lplyr(1,completedata)
as.data.frame(completedata)
str(completedata)
class(completedata)
as.data.frame(slp)
head(unname(as.data.frame(slp)))
dim(unname(as.data.frame(slp)))
?ddplyr
library(plyr)
?ddplyr
ddplyr
?do.call
rbind(completedata)
do.call("rbind",completedata)
completedata<-as.data.frame(do.call("rbind",completedata))
View(completedata)
avgs
?boxplot
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,col="deep sleep"))
library(ggplot2)
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,col="deep sleep"))
range(avgs,weekday)
avgs[c(4,2,6,7,5,1,3),]
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_point(aes(y=sleep.deep,col="deep sleep"))
?geom_line
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_point(aes(y=sleep.deep,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(sleep.deep)
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(sleep.deep))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,group=weekday))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1:nrow(completedata)))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1)
)
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_point(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))
>mfrow
?mfrow
?nfrow
par(nfcol=c(2,1))
par(mfcol=c(2,1))
ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))
ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))
p1<-ggplot(data=avgs,aes(x=weekday,y=value,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))
p2<-ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))
multiplot(p1,p2,ncol=2)
multiplot
?multiplot
??multiplot
grid.arrange(p1,p2,ncol=2)
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
p1<-ggplot(data=avgs,aes(x=weekday,y=sleep,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))+labs(title="Sleep Averages")
p2<-ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))+labs("Step Averages")
multiplot(p1,p2,nrow=2)
p1<-ggplot(data=avgs,aes(x=weekday,y=sleep,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))+labs(title="Sleep Averages")
p2<-ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))+labs("Step Averages")
multiplot(p1,p2,nrow=2)
p1<-ggplot(data=avgs,aes(x=weekday,y=sleep,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))+labs(title="Sleep Averages")
p2<-ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))+labs("Step Averages")
grid.arrange(p1,p2,ncol=2)
p1<-ggplot(data=avgs,aes(x=weekday,y=sleep,col="type"))+geom_line(aes(y=sleep.light,group=1,col="light sleep"))+geom_line(aes(y=sleep.deep,group=1,col="deep sleep"))+labs(title="Sleep Averages")
p2<-ggplot(data=avgs,aes(x=weekday,y=step))+geom_line(aes(group=1))+labs(title="Step Averages")
grid.arrange(p1,p2,nrow=2)
?tapply
apply(as.matrix(avgs),2,max)
table(avgs$weekday,max(avgs$sleep.light))
with(avgs,max(sleep.light))
with(avgs,sleep.light=max(sleep.light))
with(avgs,sleep.light==max(sleep.light))
tmp<-data.frame()
maxindex<-data.frame()
for(col in c("sleep.light","sleep.deep","step")){
rbind(maxindex,with(avgs,col==max(col)))
}
maxindex
col="sleep.light"
with(avgs,col==max(col)
)
with(avgs,col==max(col))
for(col in c("sleep.light","sleep.deep","step")){
rbind(maxindex,avgs[,col]==max(col)))
}
for(col in c("sleep.light","sleep.deep","step")){
rbind(maxindex,avgs[,col]==max(col))
}
maxindex
avgs[,col]==max(col)
View(avgs)
cbind(maxindex,c(1,2,1,2,3))
for(col in c("sleep.light","sleep.deep","step")){
rbind(maxindex,as.data.frame(avgs[,col]==max(col)))
}
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-as.data.frame(avgs[,col]==max(col))
rbind(maxindex,as.data.frame(avgs[,col]==max(col)))
}
View(maxindex)
library(reshape2)
t(maxindex)
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-t(as.data.frame(avgs[,col]==max(col)))
rbind(maxindex,t(as.data.frame(avgs[,col]==max(col))))
}
View(maxindex)
debug()
t(as.data.frame(avgs[,col]==max(col)))
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-t(as.data.frame(avgs[,col]==max(col)))
rbind(maxindex,t(as.data.frame(avgs[,col]==max(avgs[,col]))))
}
max(avgs[,col])
avgs
avgs[,col]==max(avgs[,col])
t(avgs[,col]==max(avgs[,col]))
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(col))
rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
View(maxindex)
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avg[,col]))
rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
for(col in c("sleep.light","sleep.deep","step")){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avgs[,col]))
rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
View(maxindex)
rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
maxindex<-data.frame()
for(col in 2:ncol(avgs)-1){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avgs[,col]))
maxindex<-rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
maxindex<-data.frame()
for(col in 2:(ncol(avgs)-1)){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avgs[,col]))
maxindex<-rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
View(maxindex)
for(col in 2:ncol(avgs)){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avgs[,col]))
maxindex<-rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
maxindex<-data.frame()
for(col in 2:ncol(avgs)){
if(col=="sleep.light") maxindex<-t(avgs[,col]==max(avgs[,col]))
maxindex<-rbind(maxindex,t(avgs[,col]==max(avgs[,col])))
}
max<-c()
for(row in 1:nrow(maxindex)){
max<-c(max,avgs[maxindex[row,],weekday])
}
for(row in 1:nrow(maxindex)){
max<-c(max,avgs[maxindex[row,],1])
}
avgs[maxindex[row,],1]
avgs[as.vector(maxindex[row,]),1]
avgs[as.numeric(maxindex[row,]),1]
max<-c()
for(row in 1:nrow(maxindex)){
max<-c(max,avgs[as.numeric(maxindex[row,]),1])
}
max
as.numeric(maxindex[row,]
,1]}
as.numeric(maxindex[row,])
avgs[as.numeric(maxindex[row,]),1]
avgs
tmp<-as.numeric(maxindex[row,])
tmp
avg[tmp,]
avgs[tmp,]
avgs[as.vector(tmp),]
?as.bool
?bool
avgs[tmp]
avgs[tmp,]
tmp
avgs[tmp==1,]
max<-c()
for(row in 1:nrow(maxindex)){
max<-c(max,avgs[as.numeric(maxindex[row,])==1,1])
}
names(max)
names(maxindex)
colnames(max)
colnames(maxindex)
maxindex[,0]
as.vector(maxindex[,0])
rownames(maxindex)
names(max)<-rownames(maxindex)
completedata$month<-months(completedata$date)
completedata$month %in% c("January")
completedata$month %in% c("January","February","July","August")
vacation<-completeddata[completedata$month %in% c("January","February","July","August"),]
vacation<-completedata[completedata$month %in% c("January","February","July","August"),]
vacation
schoolday<-completedata[!completedata$month %in% c("January","February","July","August"),]
View(schoolday)
hist(vacation$step)
hist(schoolday$step)
par(mfcol=c(1,1))
boxplot(vacation$step,schoolday$step,names = c("vacation","school"))
title(main="Step")
nrows(schoolday)
nrow(schoolday)
schoolresample<-as.matrix(sample(schoolday$step,1000,replace=T),nrow=100)
View(schoolresample)
?as.matrix
schoolresample<-as.matrix(sample(schoolday$step,1000,replace=T),nrow=100,ncol=10)
View(schoolresample)
schoolresample<-matrix(sample(schoolday$step,1000,replace=T),nrow=100,ncol=10)
View(schoolresample)
schoolmedia<-apply(schoolresample,1,media)
schoolmedia<-apply(schoolresample,1,median)
vacationresample<-matrix(sample(vacation$step,1000,replace = T),nrow = 100)
vacationmedian<-apply(vacationresample,1,median)
t.test(schoolmedia,vacationmedian)
schoolmedian<-apply(schoolresample,1,median)
tmp<-t.test(schoolmedia,vacationmedian)
tmp$p.value
?grid.arrange
list.files()
knitr::knit2html("Xiaomi_MiBand_Analysis.Rmd")
